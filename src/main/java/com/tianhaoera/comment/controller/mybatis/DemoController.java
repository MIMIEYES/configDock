package com.tianhaoera.comment.controller.mybatis;

import com.alibaba.fastjson.JSON;
import java.util.List;
import com.tianhaoera.comment.bean.Demo;
import com.tianhaoera.comment.bean.DemoParam;
import com.tianhaoera.comment.business.mybatis.DemoBusiness;
import net.yuanmomo.util.CollectionUtil;
import net.yuanmomo.util.exception.BaseException;
import net.yuanmomo.util.generator.PaginationBean;
import net.yuanmomo.util.generator.PaginationUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
@RequestMapping("/demo/jsp/")
public class DemoController {
	/**
	 * This field was generated by MyBatis Generator. This field corresponds to
	 * the database table demo
	 *
	 * @mbggenerated
	 */
	private static Logger logger = LoggerFactory
			.getLogger(DemoController.class);

	/**
	 * This field was generated by MyBatis Generator. This field corresponds to
	 * the database table demo
	 *
	 * @mbggenerated
	 */
	@Autowired
	private DemoBusiness demoBusiness;

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table demo
	 *
	 * @mbggenerated
	 */
	@RequestMapping(value = "insert.do")
	public String insert(@ModelAttribute("demo") Demo demo, ModelMap map) {
		try {
			// 数据校验

			if (this.demoBusiness.insertSelective(demo) == 1) {
				map.put("message", "插入成功。");
			} else {
				map.put("message", "插入失败。");
			}
		} catch (BaseException e1) {
			map.put("message", e1.getKey());
		} catch (Exception e) {
			logger.error("插入异常" + e.getMessage());
			map.put("message", "插入异常" + e.getMessage());
		}
		return "out";
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table demo
	 *
	 * @mbggenerated
	 */
	@RequestMapping(value = "getDemoByKey.do")
	public String getDemoByKey(@RequestParam("id") Long id, ModelMap map) {
		try {
			if (id == null || id < 0) {
				map.put("message", "ID 错误。");
				return "out";
			}
			Demo result = this.demoBusiness.getDemoByKey(id);
			map.put("message", result);
		} catch (BaseException e1) {
			map.put("message", e1.getKey());
		} catch (Exception e) {
			logger.error("主键获取详情异常;key=" + id + e.getMessage());
			map.put("message", "主键获取详情异常;key=" + id + e.getMessage());
		}
		return "out";
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table demo
	 *
	 * @mbggenerated
	 */
	@RequestMapping(value = "selectDemoList.do")
	public String selectDemoList(
			@RequestParam("conditionType") Short conditionType,
			@RequestParam("conditionValue") String conditionValue,
			@ModelAttribute PaginationBean paginationBean, ModelMap map) {
		try {
			int currentPage = paginationBean.getPageNum();
			int pageSize = paginationBean.getNumPerPage();

			if (pageSize < 1) {
				map.put("message", "pageSize 错误。");
				return "out";
			}
			if (currentPage < 1) {
				map.put("message", "currentPage 错误。");
				return "out";
			}
			// 构造查询参数
			DemoParam param = new DemoParam();
			// DemoParam.Criteria criteria = param.createCriteria();

			// 根据参数设置查询条件

			// 取得当前查询的总记录结果
			int total = this.demoBusiness.countDemoList(param);
			if (total == 0) { 
				// 没有记录数
				map.put("message", "没有记录。"); 
				return "out";
			}
			paginationBean.setTotalCount(total);
			// 判断当前请求的页码有没有超过总页数
			int totalPages = PaginationUtil.getPages(total, pageSize);
			paginationBean.setTotalPages(totalPages);

			if (currentPage > totalPages) {
				// 当前页超过总页数,取最大数
				currentPage = totalPages;
				paginationBean.setPageNum(currentPage);
			}

			// 设置排序
			// param.setOrderByClause(" id asc ");

			int start = (currentPage - 1) * pageSize;
			param.setStart(start);
			param.setCount(pageSize);

			List<Demo> demoList = this.demoBusiness.selectDemoList(param);

			paginationBean.setResult(demoList); // 返回数据结果
			map.put("message", JSON.toJSONString(demoList));
		} catch (BaseException e1) {
			map.put("message", e1.getKey());
		} catch (Exception e) {
			logger.error("查询异常" + e.getMessage());
			map.put("message", "查询异常" + e.getMessage());
		}
		return "out";
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table demo
	 *
	 * @mbggenerated
	 */
	@RequestMapping(value = "updateSaveDemo.do")
	public String updateSaveDemo(@ModelAttribute Demo demo, ModelMap map) {
		try {
			if (demo == null) {
				// || NumberUtil.isNotPositive(demo.getId())){
				map.put("message", "更新对象为空。");
				return "out";
			}
			int updateCount = this.demoBusiness.update(demo);
			if (updateCount == 1) {
				map.put("message", "更新成功。");
			} else {
				map.put("message", "更新失败。");
			}
		} catch (BaseException e1) {
			map.put("message", e1.getKey());
		} catch (Exception e) {
			logger.error("更新异常" + e.getMessage());
			map.put("message", "查询异常" + e.getMessage());
		}
		return "out";
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table demo
	 *
	 * @mbggenerated
	 */
	@RequestMapping(value = "batchUpdateSaveDemo.do")
	public String batchUpdateSaveDemo(@ModelAttribute DemoList demoList,
			ModelMap map) {
		try {
			if (demoList != null
					&& CollectionUtil.isNotNull(demoList.getDemoList())) {
				int updateCount = this.demoBusiness.update(demoList
						.getDemoList());
				if (updateCount > 0) {
					map.put("message", "更新成功。");
				} else {
					map.put("message", "更新失败。");
				}
			}
		} catch (BaseException e1) {
			map.put("message", e1.getKey());
		} catch (Exception e) {
			logger.error("批量更新异常" + e.getMessage());
			map.put("message", "批量更新异常" + e.getMessage());
		}
		return "out";
	}

	static class DemoList {
		private List<Demo> demoList;

		public List<Demo> getDemoList() {
			return demoList;
		}

		public void setDemoList(List<Demo> demoList) {
			this.demoList = demoList;
		}
	}
}